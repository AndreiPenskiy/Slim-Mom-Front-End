{"version":3,"file":"static/js/regisrtation-page.549979e1.chunk.js","mappings":"iUAAMA,EAAwB,SAAAC,GAAK,OAAIA,EAAMC,Y,mBCyH7C,EA/FyB,WACvB,IAAQC,GAAMC,EAAAA,EAAAA,KAAND,EACFE,GAAUC,EAAAA,EAAAA,eACVC,GAAiBC,EAAAA,EAAAA,aAAYC,EAAAA,IAC7BC,GAAeF,EAAAA,EAAAA,aAAYR,GAC3BW,GAAUH,EAAAA,EAAAA,aAAYI,EAAAA,IAEtBC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KACHG,IAAI,EADD,UACOd,EAAE,mCACZe,IAAI,IACJC,SAAS,YACZC,MAAON,EAAAA,KACJM,MADI,UACKjB,EAAE,mCACXe,IAAI,IACJC,SAAS,YACZE,SAAUP,EAAAA,KACPG,IAAI,EADG,UACGd,EAAE,mCACZe,IAAI,IACJC,SAAS,cAGVG,GAAWC,EAAAA,EAAAA,MAETC,EAAY,mCAAG,oGAASR,EAAT,EAASA,KAAMI,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,SACzChB,EAAQM,GADW,SAEON,GACxBoB,EAAAA,EAAAA,IAAS,CACPT,KAAAA,EACAI,MAAAA,EACAC,SAAAA,EACAK,WAAYnB,GAAkC,GAC9CL,WAAYQ,EAAaiB,UAAb,UAA6BjB,GAAiB,MAR3C,uBAEXkB,EAFW,EAEXA,QAFW,SAWbvB,GAAQwB,EAAAA,EAAAA,IAAkB,OAXb,OAafD,EAAQE,KAAKH,SAAUL,EAAS,UAC/BA,EAAS,eACdjB,EAAQM,GAfW,4CAAH,sDAiBlB,OACE,SAAC,KAAD,WACE,SAAC,KAAD,CACEoB,cAAe,CAAEf,KAAM,GAAII,MAAO,GAAIC,SAAU,IAChDW,iBAAkBnB,EAClBoB,SAAUT,EAHZ,UAKE,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,UAAYrB,EAAE,oBACd,UAAC,KAAD,YACE,SAAC,KAAD,CAAW+B,QAAQ,OAAnB,SAA2B/B,EAAE,uBAC7B,SAAC,KAAD,CAAWgC,GAAG,OAAOnB,KAAK,OAAOoB,KAAK,UACtC,SAAC,KAAD,CACEpB,KAAK,OACLqB,OAAQ,kBAAM,SAAC,KAAD,UAAQlC,EAAE,0BAG5B,UAAC,KAAD,YACE,SAAC,KAAD,CAAW+B,QAAQ,QAAnB,SAA4B/B,EAAE,uBAC9B,SAAC,KAAD,CAAWgC,GAAG,QAAQnB,KAAK,QAAQoB,KAAK,WACxC,SAAC,KAAD,CACEpB,KAAK,QACLqB,OAAQ,kBAAM,SAAC,KAAD,UAAQlC,EAAE,0BAG5B,UAAC,KAAD,YACE,SAAC,KAAD,CAAW+B,QAAQ,WAAnB,SAA+B/B,EAAE,uBACjC,SAAC,KAAD,CAAWgC,GAAG,WAAWnB,KAAK,WAAWoB,KAAK,cAC9C,SAAC,KAAD,CACEpB,KAAK,WACLqB,OAAQ,kBAAM,SAAC,KAAD,UAAQlC,EAAE,6BAK9B,UAAC,KAAD,YACE,SAAC,KAAD,CAAqBiC,KAAK,SAA1B,SACGjC,EAAE,uBAEL,SAAC,KAAD,CACEmC,KAAK,2DACLC,KAAK,SAFP,SAIGpC,EAAE,8B,SCjGjB,EAVyB,WACvB,OACE,iCACE,SAAC,EAAD,KACA,SAACqC,EAAA,EAAD,KACA,SAACC,EAAA,EAAD","sources":["redux/products/products-selectors.js","components/RegistrationForm/RegistrationForm.jsx","pages/RegistrationPage.jsx"],"sourcesContent":["const getCaloriesCalculator = state => state.calculator;\n\nexport {getCaloriesCalculator}","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { register } from 'redux/auth/auth-options';\nimport {\n  FormSection,\n  FormContainer,\n  FormTitle,\n  Forma,\n  FormDiv,\n  FormLabel,\n  FormInput,\n  FormButtonContainer,\n  FormButtonA,\n  FormButtonActiveBtn,\n  Alert,\n} from 'components/LoginForm/FormLoginRegistration.styled';\nimport { useTranslation } from 'react-i18next';\n// eslint-disable-next-line no-unused-vars\nimport i18n from 'utils/i18next';\nimport { useNavigate } from 'react-router-dom';\nimport { getTempParameters } from 'redux/auth/auth-selectors';\nimport { getCaloriesCalculator } from 'redux/products/products-selectors';\nimport { setTempParameters } from 'redux/auth/auth-options';\nimport { toggleLoading } from 'redux/loader/spinner-slice';\n\nconst RegistrationForm = () => {\n  const { t } = useTranslation();\n  const dispath = useDispatch();\n  const tempParameters = useSelector(getTempParameters);\n  const calcCalories = useSelector(getCaloriesCalculator);\n  const loading = useSelector(toggleLoading);\n\n  const schema = Yup.object().shape({\n    name: Yup.string()\n      .min(3, `${t('validationRegisterForm.label1')}`)\n      .max(20)\n      .required('Required'),\n    email: Yup.string()\n      .email(`${t('validationRegisterForm.label2')}`)\n      .max(40)\n      .required('Required'),\n    password: Yup.string()\n      .min(8, `${t('validationRegisterForm.label3')}`)\n      .max(20)\n      .required('Required'),\n  });\n\n  let navigate = useNavigate();\n\n  const handleSubmit = async ({ name, email, password }) => {\n    dispath(loading);\n    const { payload } = await dispath(\n      register({\n        name,\n        email,\n        password,\n        parameters: tempParameters ? tempParameters : {},\n        calculator: calcCalories.calories ? { ...calcCalories } : {},\n      })\n    );\n    await dispath(setTempParameters(null));\n\n    if (payload.user.calories) navigate('/diary');\n    else navigate('/calculator');\n    dispath(loading);\n  };\n  return (\n    <FormSection>\n      <Formik\n        initialValues={{ name: '', email: '', password: '' }}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <FormContainer>\n          <Forma>\n            <FormTitle>{t('header.signup')}</FormTitle>\n            <FormDiv>\n              <FormLabel htmlFor=\"name\">{t('AuthForm.label_1')}</FormLabel>\n              <FormInput id=\"name\" name=\"name\" type=\"text\" />\n              <ErrorMessage\n                name=\"name\"\n                render={() => <Alert>{t('notify.alert4')}</Alert>}\n              />\n            </FormDiv>\n            <FormDiv>\n              <FormLabel htmlFor=\"email\">{t('AuthForm.label_3')}</FormLabel>\n              <FormInput id=\"email\" name=\"email\" type=\"email\" />\n              <ErrorMessage\n                name=\"email\"\n                render={() => <Alert>{t('notify.alert3')}</Alert>}\n              />\n            </FormDiv>\n            <FormDiv>\n              <FormLabel htmlFor=\"password\">{t('AuthForm.label_2')}</FormLabel>\n              <FormInput id=\"password\" name=\"password\" type=\"password\" />\n              <ErrorMessage\n                name=\"password\"\n                render={() => <Alert>{t('notify.alert2')}</Alert>}\n              />\n            </FormDiv>\n          </Forma>\n          {/* <div className=\"FormButtonContainer\"> */}\n          <FormButtonContainer>\n            <FormButtonActiveBtn type=\"submit\">\n              {t('header.buttonReg')}\n            </FormButtonActiveBtn>\n            <FormButtonA\n              href=\"https://andreipenskiy.github.io/Slim-Mom-Front-End/login\"\n              role=\"button\"\n            >\n              {t('header.signin')}\n            </FormButtonA>\n            {/* </div> */}\n          </FormButtonContainer>\n        </FormContainer>\n      </Formik>\n    </FormSection>\n  );\n};\n\nexport default RegistrationForm;\n","import { LoginBackground } from 'components/Background/LoginBackground';\nimport RegistrationForm from 'components/RegistrationForm/RegistrationForm';\nimport Toast from 'components/Toast/Toast';\n\nconst RegistrationPage = () => {\n  return (\n    <>\n      <RegistrationForm />\n      <Toast />\n      <LoginBackground />\n    </>\n  );\n};\n\nexport default RegistrationPage;\n"],"names":["getCaloriesCalculator","state","calculator","t","useTranslation","dispath","useDispatch","tempParameters","useSelector","getTempParameters","calcCalories","loading","toggleLoading","schema","Yup","shape","name","min","max","required","email","password","navigate","useNavigate","handleSubmit","register","parameters","calories","payload","setTempParameters","user","initialValues","validationSchema","onSubmit","htmlFor","id","type","render","href","role","Toast","LoginBackground"],"sourceRoot":""}