{"version":3,"file":"static/js/login-page.063f23d0.chunk.js","mappings":"uRA4FA,EAtEkB,WAChB,IAAQA,GAAMC,EAAAA,EAAAA,KAAND,EACFE,GAAUC,EAAAA,EAAAA,eACVC,GAAUC,EAAAA,EAAAA,aAAYC,EAAAA,IACtBC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KACJG,OACAD,MAFI,UAEKV,EAAE,mCACXY,IAAI,IACJC,SAAS,YACZC,SAAUN,EAAAA,KACPG,OACAI,IAAI,EAFG,UAEGf,EAAE,mCACZY,IAAI,IACJI,QAAQ,QAJD,UAIahB,EAAE,mCACtBa,SAAS,cAQd,OACE,SAAC,KAAD,WACE,SAAC,KAAD,CACEI,cAAe,CAAEP,MAAO,GAAII,SAAU,IACtCI,iBAAkBX,EAClBY,SAVe,SAAC,GAAyB,IAAvBT,EAAsB,EAAtBA,MAAOI,EAAe,EAAfA,SAC7BZ,EAAQE,GACRF,GAAQkB,EAAAA,EAAAA,IAAM,CAAEV,MAAAA,EAAOI,SAAAA,KACvBZ,EAAQE,IAIN,UAKE,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,UAAYJ,EAAE,oBACd,UAAC,KAAD,YACE,SAAC,KAAD,CAAWqB,QAAQ,QAAnB,SAA4BrB,EAAE,uBAC9B,SAAC,KAAD,CAAWsB,GAAG,QAAQC,KAAK,QAAQC,KAAK,QAAQC,aAAa,YAE/D,UAAC,KAAD,YACE,SAAC,KAAD,CAAWJ,QAAQ,WAAnB,SAA+BrB,EAAE,uBACjC,SAAC,KAAD,CAAWsB,GAAG,WAAWC,KAAK,WAAWC,KAAK,WAAWC,aAAa,SAEpE,SAAC,KAAD,CACEF,KAAK,QACLG,OAAQ,kBAAM,SAAC,KAAD,UAAQ1B,EAAE,wBAG1B,SAAC,KAAD,CACEuB,KAAK,WACLG,OAAQ,kBAAM,SAAC,KAAD,UAAQ1B,EAAE,6BAKhC,UAAC,KAAD,YACE,SAAC,KAAD,CAAqBwB,KAAK,SAA1B,SACGxB,EAAE,yBAEL,SAAC,KAAD,CACE2B,KAAK,kEACLC,KAAK,SAFP,SAIG5B,EAAE,8B,SCrEjB,EAVkB,WAChB,OACE,iCACE,SAAC,EAAD,KACA,SAAC6B,EAAA,EAAD,KACA,SAACC,EAAA,EAAD","sources":["components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { logIn } from 'redux/auth/auth-options';\nimport {\n  FormSection,\n  FormContainer,\n  FormTitle,\n  Forma,\n  FormDiv,\n  FormLabel,\n  FormInput,\n  FormButtonContainer,\n  FormButtonActiveBtn,\n  FormButtonA,\n  Alert,\n} from './FormLoginRegistration.styled';\nimport { useTranslation } from 'react-i18next';\n// eslint-disable-next-line no-unused-vars\nimport i18n from 'utils/i18next';\nimport { toggleLoading } from 'redux/loader/spinner-slice';\n\nconst LoginForm = () => {\n  const { t } = useTranslation();\n  const dispath = useDispatch();\n  const loading = useSelector(toggleLoading);\n  const schema = Yup.object().shape({\n    email: Yup.string()\n      .trim()\n      .email(`${t('validationRegisterForm.label2')}`)\n      .max(40)\n      .required('Required'),\n    password: Yup.string()\n      .trim()\n      .min(8, `${t('validationRegisterForm.label3')}`)\n      .max(20)\n      .matches(/^\\S*$/, `${t('validationRegisterForm.label4')}`)\n      .required('Required'),\n  });\n\n  const handleSubmit = ({ email, password }) => {\n    dispath(loading);\n    dispath(logIn({ email, password }));\n    dispath(loading);\n  };\n  return (\n    <FormSection>\n      <Formik\n        initialValues={{ email: '', password: '' }}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <FormContainer>\n          <Forma>\n            <FormTitle>{t('header.signin')}</FormTitle>\n            <FormDiv>\n              <FormLabel htmlFor=\"email\">{t('AuthForm.label_3')}</FormLabel>\n              <FormInput id=\"email\" name=\"email\" type=\"email\" autoComplete=\"off\"/>\n            </FormDiv>\n            <FormDiv>\n              <FormLabel htmlFor=\"password\">{t('AuthForm.label_2')}</FormLabel>\n              <FormInput id=\"password\" name=\"password\" type=\"password\" autoComplete=\"off\"/>\n              {(\n                <ErrorMessage\n                  name=\"email\"\n                  render={() => <Alert>{t('notify.alert1')}</Alert>}\n                />\n              ) && (\n                <ErrorMessage\n                  name=\"password\"\n                  render={() => <Alert>{t('notify.alert1')}</Alert>}\n                />\n              )}\n            </FormDiv>\n          </Forma>\n          <FormButtonContainer>\n            <FormButtonActiveBtn type=\"submit\">\n              {t('header.buttonLogin')}\n            </FormButtonActiveBtn>\n            <FormButtonA\n              href=\"https://andreipenskiy.github.io/Slim-Mom-Front-End/registration\"\n              role=\"button\"\n            >\n              {t('header.signup')}\n            </FormButtonA>\n          </FormButtonContainer>\n        </FormContainer>\n      </Formik>\n    </FormSection>\n  );\n};\n\nexport default LoginForm;\n","import { LoginBackground } from 'components/Background/LoginBackground';\nimport LoginForm from 'components/LoginForm/LoginForm';\nimport Toast from 'components/Toast/Toast';\n\nconst LoginPage = () => {\n  return (\n    <>\n      <LoginForm />\n      <Toast />\n      <LoginBackground />\n    </>\n  );\n};\n\nexport default LoginPage;\n"],"names":["t","useTranslation","dispath","useDispatch","loading","useSelector","toggleLoading","schema","Yup","shape","email","trim","max","required","password","min","matches","initialValues","validationSchema","onSubmit","logIn","htmlFor","id","name","type","autoComplete","render","href","role","Toast","LoginBackground"],"sourceRoot":""}